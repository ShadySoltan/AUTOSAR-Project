 /******************************************************************************
 *
 * Module: Port
 *
 * File Name: Port.h
 *
 * Description: Header file for TM4C123GH6PM Microcontroller - Port Driver.
 *
 * Author: Shady-Mamdouh
 ******************************************************************************/

#ifndef PORT_H
#define PORT_H

/* Id for the company in the AUTOSAR */
#define PORT_VENDOR_ID    (777U)

/* Port Module Id */
#define PORT_MODULE_ID    (124U)

/* Port Instance Id */
#define PORT_INSTANCE_ID  (0U)

/*
 * Module Version 1.0.0
 */
#define PORT_SW_MAJOR_VERSION           (1U)
#define PORT_SW_MINOR_VERSION           (0U)
#define PORT_SW_PATCH_VERSION           (0U)

/*
 * AUTOSAR Version 4.0.3
 */
#define PORT_AR_RELEASE_MAJOR_VERSION   (4U)
#define PORT_AR_RELEASE_MINOR_VERSION   (0U)
#define PORT_AR_RELEASE_PATCH_VERSION   (3U)

/*
 * Macros for Port Status
 */
#define PORT_INITIALIZED                (1U)
#define PORT_NOT_INITIALIZED            (0U)

/* Standard AUTOSAR types */
#include "Std_Types.h"

/* AUTOSAR checking between Std Types and Port Modules */
#if ((STD_TYPES_AR_RELEASE_MAJOR_VERSION != PORT_AR_RELEASE_MAJOR_VERSION)\
 ||  (STD_TYPES_AR_RELEASE_MINOR_VERSION != PORT_AR_RELEASE_MINOR_VERSION)\
 ||  (STD_TYPES_AR_RELEASE_PATCH_VERSION != PORT_AR_RELEASE_PATCH_VERSION))
  #error "The AR version of Std_Types.h does not match the expected version"
#endif

/* Port Pre-Compile Configuration Header file */
#include "Port_Cfg.h"

/* AUTOSAR Version checking between Port_Cfg.h and Port.h files */
#if ((PORT_CFG_AR_RELEASE_MAJOR_VERSION != PORT_AR_RELEASE_MAJOR_VERSION)\
 ||  (PORT_CFG_AR_RELEASE_MINOR_VERSION != PORT_AR_RELEASE_MINOR_VERSION)\
 ||  (PORT_CFG_AR_RELEASE_PATCH_VERSION != PORT_AR_RELEASE_PATCH_VERSION))
  #error "The AR version of Port_Cfg.h does not match the expected version"
#endif

/* Software Version checking between Port_Cfg.h and Port.h files */
#if ((PORT_CFG_SW_MAJOR_VERSION != PORT_SW_MAJOR_VERSION)\
 ||  (PORT_CFG_SW_MINOR_VERSION != PORT_SW_MINOR_VERSION)\
 ||  (PORT_CFG_SW_PATCH_VERSION != PORT_SW_PATCH_VERSION))
  #error "The SW version of Port_Cfg.h does not match the expected version"
#endif

/* Non AUTOSAR files */
#include "Common_Macros.h"

/******************************************************************************
 *                      API Service Id Macros                                 *
 ******************************************************************************/
/* Service ID for PORT Init */
#define PORT_INIT_SID                           (uint8)0x00

/* Service ID for PORT Set Pin Direction */
#define PORT_SET_PIN_DIRECTION_SID              (uint8)0x01

/* Service ID for PORT Refresh Port Direction */
#define PORT_REFRESH_PORT_DIRECTION_SID         (uint8)0x02

/* Service ID for PORT Get Version Info */
#define PORT_GET_VERSION_INFO_SID               (uint8)0x03

/* Service ID for PORT Set Pin Mode */
#define PORT_SET_PIN_MODE_SID                   (uint8)0x04

/*******************************************************************************
 *                      DET Error Codes                                        *
 *******************************************************************************/
/* DET code to report Incorrect Port Pin ID request */
#define PORT_E_PARAM_PIN                        (uint8)0x0A

/* DET code to report Port Pin not configured as changeable */
#define PORT_E_DIRECTION_UNCHANGEABLE           (uint8)0x0B

/* Port_Init API service called with wrong parameter */
#define PORT_E_PARAM_CONFIG                     (uint8)0x0C

/* DET code to report Port Pin Mode passed not valid  */
#define PORT_E_PARAM_INVALID_MODE               (uint8)0x0D

/* Port_SetPinMode service called when the mode is unchangeable */
#define PORT_E_MODE_UNCHANGEABLE                (uint8)0x0E

/* DET code to report Api service called prior to module initialization */
#define PORT_E_UNINIT                          (uint8)0x0F

/* DET code to report Api called with a NULL Pointer Parameter  */
#define PORT_E_PARAM_POINTER                   (uint8)0x10

/*******************************************************************************
 *                              Module Data Types                              *
 *******************************************************************************/

/* Type definition for Port_PinType used by the PORT APIs */
typedef uint8 Port_PinType;

/* Type definition for Port_PinModeTypes used by the PORT APIs */
typedef uint8 Port_PinModeType;

/* Description: Enum to hold PIN direction */
typedef enum
{
    PORT_PIN_IN,PORT_PIN_OUT
}Port_PinDirection;

/* Description: Enum to hold internal resistor type for PIN */
typedef enum
{
    OFF,PULL_UP,PULL_DOWN
}Port_InternalResistor;

/* Description: Enum to hold pin initial mode */
typedef enum{
    PIN_LEVEL_LOW,
    PIN_LEVEL_HIGH
}Port_Pin_Level;


/*Mode Types*/
typedef enum{
    PORT_PIN_MODE_DIO,
    PORT_PIN_MODE_UART_A,
    PORT_PIN_MODE_UART_B,
    PORT_PIN_MODE_SPI_A,
    PORT_PIN_MODE_SPI_B,
    PORT_PIN_MODE_I2C,
    PORT_PIN_MODE_PWM_A,
    PORT_PIN_MODE_PWM_B,
    PORT_PIN_MODE_QEI,
    PORT_PIN_MODE_GPT,
    PORT_PIN_MODE_CAN,
    PORT_PIN_MODE_NMI,
    PORT_PIN_MODE_USB,
    PORT_PIN_MODE_COMPARATOR_OUT,
    PORT_PIN_MODE_TRACE_CLK,
    PORT_PIN_MODE_ADC
}Pin_ModeTypes;

/* Description: Structure to configure each individual PIN:
 *      1. the PORT Which the pin belongs to. 0, 1, 2, 3, 4 or 5
 *      2. the number of the pin in the PORT.
 *      3. the direction of pin --> INPUT or OUTPUT
 *      4. the pin value --> PIN_LEVEL_LOW or PIN_LEVEL_HIGH
 *      5. the ability to change the pin direction after initialization STD_OFF or STD_ON
 *      6. the ability to change the pin mode after initialization STD_OFF or STD_ON
 *      6. the internal resistor --> Disable, Pull up or Pull down OFF,PULL_UP,or PULL_DOWN
 */
typedef struct
{
    uint8 portId;
    Port_PinType pinId;
    Port_PinModeType port_pin_mode;
    Port_PinDirection direction;
    Port_Pin_Level initial_value;
    uint8 pin_direction_changeable;
    uint8 pin_mode_changeable;
    Port_InternalResistor resistor;
}Port_PinConfig;

typedef struct
{
    Port_PinConfig Port_PinConfig[PORT_PIN_NUM];
}Port_ConfigType;


/*******************************************************************************
 *                      Function Prototypes                                    *
 *******************************************************************************/

/*Initializes the Port Driver module.*/
void Port_Init(
        const Port_ConfigType *ConfigPtr
);

/*Sets the port pin direction.*/
#if (PORT_SET_PIN_DIRECTION_API == STD_ON)
void Port_SetPinDirection(
        Port_PinType Pin,
        Port_PinDirection Direction
);
#endif

/*Refreshes port direction.*/
void Port_RefreshPortDirection(void);

/*Returns the version information of this module.*/
#if (PORT_VERSION_INFO_API == STD_ON)
void Port_GetVersionInfo(
        Std_VersionInfoType *versioninfo
);
#endif

/*Sets the port pin mode.*/
#if (PORT_SET_PIN_MODE_API == STD_ON)
void Port_SetPinMode(
        Port_PinType Pin,
        Port_PinModeType Mode
);
#endif

/*******************************************************************************
 *                       External Variables                                    *
 *******************************************************************************/

/* Extern PB structures to be used by Port and other modules */
extern const Port_ConfigType Port_Configuration;

#endif /* PORT_H */
